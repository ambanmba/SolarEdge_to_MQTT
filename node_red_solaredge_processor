function formatNumber(number) {
    return Number(number.toFixed(2));
}

// Process all SolarEdge inverter and meter data
if (!msg.payload || !msg.payload.meters || !msg.payload.meters.Meter1) {
    node.status({
        fill: "red",
        shape: "ring",
        text: "No valid data"
    });
    msg.payload.processed = {
        connection_status: "disconnected",
        timestamp: msg.payload.monitoring ? msg.payload.monitoring.last_successful_read : null,
        connection_attempts: msg.payload.monitoring ? msg.payload.monitoring.connection_attempts : 0,
        consecutive_failures: msg.payload.monitoring ? msg.payload.monitoring.consecutive_failures : 0
    };
    return msg;
}

try {
    const meter = msg.payload.meters.Meter1;
    const inverter = msg.payload;

    // Calculate all scaling factors
    const scales = {
        current: Math.pow(10, meter.current_scale),
        voltage: Math.pow(10, meter.voltage_scale),
        power: Math.pow(10, meter.power_scale),
        powerApparent: Math.pow(10, meter.power_apparent_scale),
        powerReactive: Math.pow(10, meter.power_reactive_scale),
        powerFactor: Math.pow(10, meter.power_factor_scale),
        energyActive: Math.pow(10, meter.energy_active_scale),
        frequency: Math.pow(10, meter.frequency_scale),
        dc: {
            current: Math.pow(10, inverter.current_dc_scale),
            voltage: Math.pow(10, inverter.voltage_dc_scale),
            power: Math.pow(10, inverter.power_dc_scale)
        },
        temperature: Math.pow(10, inverter.temperature_scale)
    };

    // Process meter currents
    const currents = {
        total: formatNumber(meter.current * scales.current),
        l1: formatNumber(meter.l1_current * scales.current),
        l2: formatNumber(meter.l2_current * scales.current),
        l3: formatNumber(meter.l3_current * scales.current)
    };
    currents.min = formatNumber(Math.min(currents.l1, currents.l2, currents.l3));

    // Calculate power values with correct scaling
    const solarPower = formatNumber(inverter.power_dc * scales.dc.power);
    const gridPower = formatNumber(meter.power * scales.power);

    // Calculate household consumption
    // If gridPower is positive, we're exporting (selling) to grid
    // If gridPower is negative, we're importing (buying) from grid
    const householdConsumption = formatNumber(solarPower - gridPower);  // Changed to subtract gridPower

    // Calculate inverter efficiency
    const acPower = formatNumber(inverter.power_ac * Math.pow(10, inverter.power_ac_scale));
    const inverterEfficiency = formatNumber((acPower / solarPower) * 100);

    // Status info - show key metrics
    const statusText = `Solar: ${solarPower}W | Grid: ${gridPower}W | Home: ${householdConsumption}W`;
    node.status({
        fill: gridPower > 0 ? "green" : "blue",  // Green when exporting (positive), blue when importing (negative)
        shape: "dot",
        text: statusText
    });

    // Process and format all other values
    msg.payload.processed = {
        connection_status: "connected",
        timestamp: inverter.monitoring.last_successful_read,
        currents: currents,
        voltages: {
            l1n: formatNumber(meter.l1n_voltage * scales.voltage),
            l2n: formatNumber(meter.l2n_voltage * scales.voltage),
            l3n: formatNumber(meter.l3n_voltage * scales.voltage)
        },
        power: {
            total: formatNumber(meter.power * scales.power),
            l1: formatNumber(meter.l1_power * scales.power),
            l2: formatNumber(meter.l2_power * scales.power),
            l3: formatNumber(meter.l3_power * scales.power)
        },
        dc: {
            current: formatNumber(inverter.current_dc * scales.dc.current),
            voltage: formatNumber(inverter.voltage_dc * scales.dc.voltage),
            power: solarPower
        },
        energy: {
            exported: formatNumber(meter.export_energy_active * scales.energyActive),
            imported: formatNumber(meter.import_energy_active * scales.energyActive),
            lifetime_total: inverter.energy_total,
            per_phase: {
                l1: {
                    exported: formatNumber(meter.l1_export_energy_active * scales.energyActive),
                    imported: formatNumber(meter.l1_import_energy_active * scales.energyActive)
                },
                l2: {
                    exported: formatNumber(meter.l2_export_energy_active * scales.energyActive),
                    imported: formatNumber(meter.l2_import_energy_active * scales.energyActive)
                },
                l3: {
                    exported: formatNumber(meter.l3_export_energy_active * scales.energyActive),
                    imported: formatNumber(meter.l3_import_energy_active * scales.energyActive)
                }
            }
        },
        power_quality: {
            frequency: formatNumber(inverter.frequency * scales.frequency),
            power_factor: {
                total: formatNumber(meter.power_factor * scales.powerFactor),
                l1: formatNumber(meter.l1_power_factor * scales.powerFactor),
                l2: formatNumber(meter.l2_power_factor * scales.powerFactor),
                l3: formatNumber(meter.l3_power_factor * scales.powerFactor)
            },
            apparent_power: {
                total: formatNumber(meter.power_apparent * scales.powerApparent),
                l1: formatNumber(meter.l1_power_apparent * scales.powerApparent),
                l2: formatNumber(meter.l2_power_apparent * scales.powerApparent),
                l3: formatNumber(meter.l3_power_apparent * scales.powerApparent)
            },
            reactive_power: {
                total: formatNumber(meter.power_reactive * scales.powerReactive),
                l1: formatNumber(meter.l1_power_reactive * scales.powerReactive),
                l2: formatNumber(meter.l2_power_reactive * scales.powerReactive),
                l3: formatNumber(meter.l3_power_reactive * scales.powerReactive)
            }
        },
        inverter_status: {
            temperature: formatNumber(inverter.temperature * scales.temperature),
            status_code: inverter.status,
            efficiency: inverterEfficiency,
            ac_power: acPower
        },
        calculated: {
            solar_production: solarPower,
            grid_power: gridPower,
            household_consumption: householdConsumption,
            grid_direction: gridPower > 0 ? "exporting" : "importing"  // Positive means exporting, negative means importing
        }
    };

} catch (error) {
    node.status({
        fill: "red",
        shape: "ring",
        text: "Error: " + error.message
    });
    node.error("Processing error: " + error.message, msg);
}

return msg;
